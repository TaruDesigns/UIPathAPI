# coding: utf-8

"""
    UiPath.WebApi 16.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 16.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from UIPathAPI.configuration import Configuration


class QueueItemDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'queue_definition_id': 'int',
        'queue_definition': 'QueueDefinitionDto',
        'processing_exception': 'ProcessingExceptionDto',
        'encrypted': 'bool',
        'specific_content': 'dict(str, object)',
        'output': 'dict(str, object)',
        'output_data': 'str',
        'analytics': 'dict(str, object)',
        'analytics_data': 'str',
        'status': 'str',
        'review_status': 'str',
        'reviewer_user_id': 'int',
        'reviewer_user': 'SimpleUserDto',
        'key': 'str',
        'reference': 'str',
        'processing_exception_type': 'str',
        'due_date': 'datetime',
        'risk_sla_date': 'datetime',
        'priority': 'str',
        'robot': 'SimpleRobotDto',
        'defer_date': 'datetime',
        'start_processing': 'datetime',
        'end_processing': 'datetime',
        'seconds_in_previous_attempts': 'int',
        'ancestor_id': 'int',
        'retry_number': 'int',
        'specific_data': 'str',
        'creation_time': 'datetime',
        'progress': 'str',
        'row_version': 'str',
        'organization_unit_id': 'int',
        'organization_unit_fully_qualified_name': 'str',
        'id': 'int'
    }

    attribute_map = {
        'queue_definition_id': 'QueueDefinitionId',
        'queue_definition': 'QueueDefinition',
        'processing_exception': 'ProcessingException',
        'encrypted': 'Encrypted',
        'specific_content': 'SpecificContent',
        'output': 'Output',
        'output_data': 'OutputData',
        'analytics': 'Analytics',
        'analytics_data': 'AnalyticsData',
        'status': 'Status',
        'review_status': 'ReviewStatus',
        'reviewer_user_id': 'ReviewerUserId',
        'reviewer_user': 'ReviewerUser',
        'key': 'Key',
        'reference': 'Reference',
        'processing_exception_type': 'ProcessingExceptionType',
        'due_date': 'DueDate',
        'risk_sla_date': 'RiskSlaDate',
        'priority': 'Priority',
        'robot': 'Robot',
        'defer_date': 'DeferDate',
        'start_processing': 'StartProcessing',
        'end_processing': 'EndProcessing',
        'seconds_in_previous_attempts': 'SecondsInPreviousAttempts',
        'ancestor_id': 'AncestorId',
        'retry_number': 'RetryNumber',
        'specific_data': 'SpecificData',
        'creation_time': 'CreationTime',
        'progress': 'Progress',
        'row_version': 'RowVersion',
        'organization_unit_id': 'OrganizationUnitId',
        'organization_unit_fully_qualified_name': 'OrganizationUnitFullyQualifiedName',
        'id': 'Id'
    }

    def __init__(self, queue_definition_id=None, queue_definition=None, processing_exception=None, encrypted=None, specific_content=None, output=None, output_data=None, analytics=None, analytics_data=None, status=None, review_status=None, reviewer_user_id=None, reviewer_user=None, key=None, reference=None, processing_exception_type=None, due_date=None, risk_sla_date=None, priority=None, robot=None, defer_date=None, start_processing=None, end_processing=None, seconds_in_previous_attempts=None, ancestor_id=None, retry_number=None, specific_data=None, creation_time=None, progress=None, row_version=None, organization_unit_id=None, organization_unit_fully_qualified_name=None, id=None, _configuration=None):  # noqa: E501
        """QueueItemDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._queue_definition_id = None
        self._queue_definition = None
        self._processing_exception = None
        self._encrypted = None
        self._specific_content = None
        self._output = None
        self._output_data = None
        self._analytics = None
        self._analytics_data = None
        self._status = None
        self._review_status = None
        self._reviewer_user_id = None
        self._reviewer_user = None
        self._key = None
        self._reference = None
        self._processing_exception_type = None
        self._due_date = None
        self._risk_sla_date = None
        self._priority = None
        self._robot = None
        self._defer_date = None
        self._start_processing = None
        self._end_processing = None
        self._seconds_in_previous_attempts = None
        self._ancestor_id = None
        self._retry_number = None
        self._specific_data = None
        self._creation_time = None
        self._progress = None
        self._row_version = None
        self._organization_unit_id = None
        self._organization_unit_fully_qualified_name = None
        self._id = None
        self.discriminator = None

        if queue_definition_id is not None:
            self.queue_definition_id = queue_definition_id
        if queue_definition is not None:
            self.queue_definition = queue_definition
        if processing_exception is not None:
            self.processing_exception = processing_exception
        if encrypted is not None:
            self.encrypted = encrypted
        if specific_content is not None:
            self.specific_content = specific_content
        if output is not None:
            self.output = output
        if output_data is not None:
            self.output_data = output_data
        if analytics is not None:
            self.analytics = analytics
        if analytics_data is not None:
            self.analytics_data = analytics_data
        if status is not None:
            self.status = status
        if review_status is not None:
            self.review_status = review_status
        if reviewer_user_id is not None:
            self.reviewer_user_id = reviewer_user_id
        if reviewer_user is not None:
            self.reviewer_user = reviewer_user
        if key is not None:
            self.key = key
        if reference is not None:
            self.reference = reference
        if processing_exception_type is not None:
            self.processing_exception_type = processing_exception_type
        if due_date is not None:
            self.due_date = due_date
        if risk_sla_date is not None:
            self.risk_sla_date = risk_sla_date
        if priority is not None:
            self.priority = priority
        if robot is not None:
            self.robot = robot
        if defer_date is not None:
            self.defer_date = defer_date
        if start_processing is not None:
            self.start_processing = start_processing
        if end_processing is not None:
            self.end_processing = end_processing
        if seconds_in_previous_attempts is not None:
            self.seconds_in_previous_attempts = seconds_in_previous_attempts
        if ancestor_id is not None:
            self.ancestor_id = ancestor_id
        if retry_number is not None:
            self.retry_number = retry_number
        if specific_data is not None:
            self.specific_data = specific_data
        if creation_time is not None:
            self.creation_time = creation_time
        if progress is not None:
            self.progress = progress
        if row_version is not None:
            self.row_version = row_version
        if organization_unit_id is not None:
            self.organization_unit_id = organization_unit_id
        if organization_unit_fully_qualified_name is not None:
            self.organization_unit_fully_qualified_name = organization_unit_fully_qualified_name
        if id is not None:
            self.id = id

    @property
    def queue_definition_id(self):
        """Gets the queue_definition_id of this QueueItemDto.  # noqa: E501

        The Id of the parent queue.  # noqa: E501

        :return: The queue_definition_id of this QueueItemDto.  # noqa: E501
        :rtype: int
        """
        return self._queue_definition_id

    @queue_definition_id.setter
    def queue_definition_id(self, queue_definition_id):
        """Sets the queue_definition_id of this QueueItemDto.

        The Id of the parent queue.  # noqa: E501

        :param queue_definition_id: The queue_definition_id of this QueueItemDto.  # noqa: E501
        :type: int
        """

        self._queue_definition_id = queue_definition_id

    @property
    def queue_definition(self):
        """Gets the queue_definition of this QueueItemDto.  # noqa: E501


        :return: The queue_definition of this QueueItemDto.  # noqa: E501
        :rtype: QueueDefinitionDto
        """
        return self._queue_definition

    @queue_definition.setter
    def queue_definition(self, queue_definition):
        """Sets the queue_definition of this QueueItemDto.


        :param queue_definition: The queue_definition of this QueueItemDto.  # noqa: E501
        :type: QueueDefinitionDto
        """

        self._queue_definition = queue_definition

    @property
    def processing_exception(self):
        """Gets the processing_exception of this QueueItemDto.  # noqa: E501


        :return: The processing_exception of this QueueItemDto.  # noqa: E501
        :rtype: ProcessingExceptionDto
        """
        return self._processing_exception

    @processing_exception.setter
    def processing_exception(self, processing_exception):
        """Sets the processing_exception of this QueueItemDto.


        :param processing_exception: The processing_exception of this QueueItemDto.  # noqa: E501
        :type: ProcessingExceptionDto
        """

        self._processing_exception = processing_exception

    @property
    def encrypted(self):
        """Gets the encrypted of this QueueItemDto.  # noqa: E501

        Is the item has encrypted data in the database  # noqa: E501

        :return: The encrypted of this QueueItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this QueueItemDto.

        Is the item has encrypted data in the database  # noqa: E501

        :param encrypted: The encrypted of this QueueItemDto.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def specific_content(self):
        """Gets the specific_content of this QueueItemDto.  # noqa: E501

        A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.  # noqa: E501

        :return: The specific_content of this QueueItemDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._specific_content

    @specific_content.setter
    def specific_content(self, specific_content):
        """Sets the specific_content of this QueueItemDto.

        A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.  # noqa: E501

        :param specific_content: The specific_content of this QueueItemDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._specific_content = specific_content

    @property
    def output(self):
        """Gets the output of this QueueItemDto.  # noqa: E501

        A collection of key value pairs containing custom data resulted after successful processing.  # noqa: E501

        :return: The output of this QueueItemDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this QueueItemDto.

        A collection of key value pairs containing custom data resulted after successful processing.  # noqa: E501

        :param output: The output of this QueueItemDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._output = output

    @property
    def output_data(self):
        """Gets the output_data of this QueueItemDto.  # noqa: E501

        A JSON representation of the output data generated by the item's processing.  # noqa: E501

        :return: The output_data of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._output_data

    @output_data.setter
    def output_data(self, output_data):
        """Sets the output_data of this QueueItemDto.

        A JSON representation of the output data generated by the item's processing.  # noqa: E501

        :param output_data: The output_data of this QueueItemDto.  # noqa: E501
        :type: str
        """

        self._output_data = output_data

    @property
    def analytics(self):
        """Gets the analytics of this QueueItemDto.  # noqa: E501

        A collection of key value pairs containing custom data for further analytics processing.  # noqa: E501

        :return: The analytics of this QueueItemDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this QueueItemDto.

        A collection of key value pairs containing custom data for further analytics processing.  # noqa: E501

        :param analytics: The analytics of this QueueItemDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._analytics = analytics

    @property
    def analytics_data(self):
        """Gets the analytics_data of this QueueItemDto.  # noqa: E501

        A JSON representation of the analytics data generated by the item's processing.  # noqa: E501

        :return: The analytics_data of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._analytics_data

    @analytics_data.setter
    def analytics_data(self, analytics_data):
        """Sets the analytics_data of this QueueItemDto.

        A JSON representation of the analytics data generated by the item's processing.  # noqa: E501

        :param analytics_data: The analytics_data of this QueueItemDto.  # noqa: E501
        :type: str
        """

        self._analytics_data = analytics_data

    @property
    def status(self):
        """Gets the status of this QueueItemDto.  # noqa: E501

        The processing state of the item.  # noqa: E501

        :return: The status of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QueueItemDto.

        The processing state of the item.  # noqa: E501

        :param status: The status of this QueueItemDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["New", "InProgress", "Failed", "Successful", "Abandoned", "Retried", "Deleted"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def review_status(self):
        """Gets the review_status of this QueueItemDto.  # noqa: E501

        The review state of the item - applicable only for failed items.  # noqa: E501

        :return: The review_status of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """Sets the review_status of this QueueItemDto.

        The review state of the item - applicable only for failed items.  # noqa: E501

        :param review_status: The review_status of this QueueItemDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "InReview", "Verified", "Retried"]  # noqa: E501
        if (self._configuration.client_side_validation and
                review_status not in allowed_values):
            raise ValueError(
                "Invalid value for `review_status` ({0}), must be one of {1}"  # noqa: E501
                .format(review_status, allowed_values)
            )

        self._review_status = review_status

    @property
    def reviewer_user_id(self):
        """Gets the reviewer_user_id of this QueueItemDto.  # noqa: E501

        The UserId of the Reviewer, if any.  # noqa: E501

        :return: The reviewer_user_id of this QueueItemDto.  # noqa: E501
        :rtype: int
        """
        return self._reviewer_user_id

    @reviewer_user_id.setter
    def reviewer_user_id(self, reviewer_user_id):
        """Sets the reviewer_user_id of this QueueItemDto.

        The UserId of the Reviewer, if any.  # noqa: E501

        :param reviewer_user_id: The reviewer_user_id of this QueueItemDto.  # noqa: E501
        :type: int
        """

        self._reviewer_user_id = reviewer_user_id

    @property
    def reviewer_user(self):
        """Gets the reviewer_user of this QueueItemDto.  # noqa: E501


        :return: The reviewer_user of this QueueItemDto.  # noqa: E501
        :rtype: SimpleUserDto
        """
        return self._reviewer_user

    @reviewer_user.setter
    def reviewer_user(self, reviewer_user):
        """Sets the reviewer_user of this QueueItemDto.


        :param reviewer_user: The reviewer_user of this QueueItemDto.  # noqa: E501
        :type: SimpleUserDto
        """

        self._reviewer_user = reviewer_user

    @property
    def key(self):
        """Gets the key of this QueueItemDto.  # noqa: E501

        The unique identifier of a queue item.  # noqa: E501

        :return: The key of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this QueueItemDto.

        The unique identifier of a queue item.  # noqa: E501

        :param key: The key of this QueueItemDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def reference(self):
        """Gets the reference of this QueueItemDto.  # noqa: E501

        An optional, user-specified value for queue item identification.  # noqa: E501

        :return: The reference of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this QueueItemDto.

        An optional, user-specified value for queue item identification.  # noqa: E501

        :param reference: The reference of this QueueItemDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                reference is not None and len(reference) > 128):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                reference is not None and len(reference) < 0):
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `0`")  # noqa: E501

        self._reference = reference

    @property
    def processing_exception_type(self):
        """Gets the processing_exception_type of this QueueItemDto.  # noqa: E501

        The processing exception. If the item has not been processed or has been processed successfully it will be null.  # noqa: E501

        :return: The processing_exception_type of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._processing_exception_type

    @processing_exception_type.setter
    def processing_exception_type(self, processing_exception_type):
        """Sets the processing_exception_type of this QueueItemDto.

        The processing exception. If the item has not been processed or has been processed successfully it will be null.  # noqa: E501

        :param processing_exception_type: The processing_exception_type of this QueueItemDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ApplicationException", "BusinessException"]  # noqa: E501
        if (self._configuration.client_side_validation and
                processing_exception_type not in allowed_values):
            raise ValueError(
                "Invalid value for `processing_exception_type` ({0}), must be one of {1}"  # noqa: E501
                .format(processing_exception_type, allowed_values)
            )

        self._processing_exception_type = processing_exception_type

    @property
    def due_date(self):
        """Gets the due_date of this QueueItemDto.  # noqa: E501

        The latest date and time at which the item should be processed. If empty the item can be processed at any given time.  # noqa: E501

        :return: The due_date of this QueueItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this QueueItemDto.

        The latest date and time at which the item should be processed. If empty the item can be processed at any given time.  # noqa: E501

        :param due_date: The due_date of this QueueItemDto.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def risk_sla_date(self):
        """Gets the risk_sla_date of this QueueItemDto.  # noqa: E501

        The RiskSla date at time which is considered as risk zone for the item to be processed.  # noqa: E501

        :return: The risk_sla_date of this QueueItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._risk_sla_date

    @risk_sla_date.setter
    def risk_sla_date(self, risk_sla_date):
        """Sets the risk_sla_date of this QueueItemDto.

        The RiskSla date at time which is considered as risk zone for the item to be processed.  # noqa: E501

        :param risk_sla_date: The risk_sla_date of this QueueItemDto.  # noqa: E501
        :type: datetime
        """

        self._risk_sla_date = risk_sla_date

    @property
    def priority(self):
        """Gets the priority of this QueueItemDto.  # noqa: E501

        Sets the processing importance for a given item.  # noqa: E501

        :return: The priority of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this QueueItemDto.

        Sets the processing importance for a given item.  # noqa: E501

        :param priority: The priority of this QueueItemDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["High", "Normal", "Low"]  # noqa: E501
        if (self._configuration.client_side_validation and
                priority not in allowed_values):
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def robot(self):
        """Gets the robot of this QueueItemDto.  # noqa: E501


        :return: The robot of this QueueItemDto.  # noqa: E501
        :rtype: SimpleRobotDto
        """
        return self._robot

    @robot.setter
    def robot(self, robot):
        """Sets the robot of this QueueItemDto.


        :param robot: The robot of this QueueItemDto.  # noqa: E501
        :type: SimpleRobotDto
        """

        self._robot = robot

    @property
    def defer_date(self):
        """Gets the defer_date of this QueueItemDto.  # noqa: E501

        The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.  # noqa: E501

        :return: The defer_date of this QueueItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._defer_date

    @defer_date.setter
    def defer_date(self, defer_date):
        """Sets the defer_date of this QueueItemDto.

        The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.  # noqa: E501

        :param defer_date: The defer_date of this QueueItemDto.  # noqa: E501
        :type: datetime
        """

        self._defer_date = defer_date

    @property
    def start_processing(self):
        """Gets the start_processing of this QueueItemDto.  # noqa: E501

        The date and time at which the item processing started. This is null if the item was not processed.  # noqa: E501

        :return: The start_processing of this QueueItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._start_processing

    @start_processing.setter
    def start_processing(self, start_processing):
        """Sets the start_processing of this QueueItemDto.

        The date and time at which the item processing started. This is null if the item was not processed.  # noqa: E501

        :param start_processing: The start_processing of this QueueItemDto.  # noqa: E501
        :type: datetime
        """

        self._start_processing = start_processing

    @property
    def end_processing(self):
        """Gets the end_processing of this QueueItemDto.  # noqa: E501

        The date and time at which the item processing ended. This is null if the item was not processed.  # noqa: E501

        :return: The end_processing of this QueueItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._end_processing

    @end_processing.setter
    def end_processing(self, end_processing):
        """Sets the end_processing of this QueueItemDto.

        The date and time at which the item processing ended. This is null if the item was not processed.  # noqa: E501

        :param end_processing: The end_processing of this QueueItemDto.  # noqa: E501
        :type: datetime
        """

        self._end_processing = end_processing

    @property
    def seconds_in_previous_attempts(self):
        """Gets the seconds_in_previous_attempts of this QueueItemDto.  # noqa: E501

        The number of seconds that the last failed processing lasted.  # noqa: E501

        :return: The seconds_in_previous_attempts of this QueueItemDto.  # noqa: E501
        :rtype: int
        """
        return self._seconds_in_previous_attempts

    @seconds_in_previous_attempts.setter
    def seconds_in_previous_attempts(self, seconds_in_previous_attempts):
        """Sets the seconds_in_previous_attempts of this QueueItemDto.

        The number of seconds that the last failed processing lasted.  # noqa: E501

        :param seconds_in_previous_attempts: The seconds_in_previous_attempts of this QueueItemDto.  # noqa: E501
        :type: int
        """

        self._seconds_in_previous_attempts = seconds_in_previous_attempts

    @property
    def ancestor_id(self):
        """Gets the ancestor_id of this QueueItemDto.  # noqa: E501

        The Id of an ancestor item connected to the current item.  # noqa: E501

        :return: The ancestor_id of this QueueItemDto.  # noqa: E501
        :rtype: int
        """
        return self._ancestor_id

    @ancestor_id.setter
    def ancestor_id(self, ancestor_id):
        """Sets the ancestor_id of this QueueItemDto.

        The Id of an ancestor item connected to the current item.  # noqa: E501

        :param ancestor_id: The ancestor_id of this QueueItemDto.  # noqa: E501
        :type: int
        """

        self._ancestor_id = ancestor_id

    @property
    def retry_number(self):
        """Gets the retry_number of this QueueItemDto.  # noqa: E501

        The number of times this work item has been processed.  <para />This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.  # noqa: E501

        :return: The retry_number of this QueueItemDto.  # noqa: E501
        :rtype: int
        """
        return self._retry_number

    @retry_number.setter
    def retry_number(self, retry_number):
        """Sets the retry_number of this QueueItemDto.

        The number of times this work item has been processed.  <para />This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.  # noqa: E501

        :param retry_number: The retry_number of this QueueItemDto.  # noqa: E501
        :type: int
        """

        self._retry_number = retry_number

    @property
    def specific_data(self):
        """Gets the specific_data of this QueueItemDto.  # noqa: E501

        A JSON representation of the specific content.  # noqa: E501

        :return: The specific_data of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._specific_data

    @specific_data.setter
    def specific_data(self, specific_data):
        """Sets the specific_data of this QueueItemDto.

        A JSON representation of the specific content.  # noqa: E501

        :param specific_data: The specific_data of this QueueItemDto.  # noqa: E501
        :type: str
        """

        self._specific_data = specific_data

    @property
    def creation_time(self):
        """Gets the creation_time of this QueueItemDto.  # noqa: E501

        The date and time when the item was created.  # noqa: E501

        :return: The creation_time of this QueueItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this QueueItemDto.

        The date and time when the item was created.  # noqa: E501

        :param creation_time: The creation_time of this QueueItemDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def progress(self):
        """Gets the progress of this QueueItemDto.  # noqa: E501

        String field which is used to keep track of the business flow progress.  # noqa: E501

        :return: The progress of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this QueueItemDto.

        String field which is used to keep track of the business flow progress.  # noqa: E501

        :param progress: The progress of this QueueItemDto.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def row_version(self):
        """Gets the row_version of this QueueItemDto.  # noqa: E501

        Identifier used for optimistic concurrency, so Orchestrator can figure whether data is out of date or not.  # noqa: E501

        :return: The row_version of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this QueueItemDto.

        Identifier used for optimistic concurrency, so Orchestrator can figure whether data is out of date or not.  # noqa: E501

        :param row_version: The row_version of this QueueItemDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                row_version is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', row_version)):  # noqa: E501
            raise ValueError(r"Invalid value for `row_version`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._row_version = row_version

    @property
    def organization_unit_id(self):
        """Gets the organization_unit_id of this QueueItemDto.  # noqa: E501

        DEPRECATED.   # noqa: E501

        :return: The organization_unit_id of this QueueItemDto.  # noqa: E501
        :rtype: int
        """
        return self._organization_unit_id

    @organization_unit_id.setter
    def organization_unit_id(self, organization_unit_id):
        """Sets the organization_unit_id of this QueueItemDto.

        DEPRECATED.   # noqa: E501

        :param organization_unit_id: The organization_unit_id of this QueueItemDto.  # noqa: E501
        :type: int
        """

        self._organization_unit_id = organization_unit_id

    @property
    def organization_unit_fully_qualified_name(self):
        """Gets the organization_unit_fully_qualified_name of this QueueItemDto.  # noqa: E501

        DEPRECATED.   # noqa: E501

        :return: The organization_unit_fully_qualified_name of this QueueItemDto.  # noqa: E501
        :rtype: str
        """
        return self._organization_unit_fully_qualified_name

    @organization_unit_fully_qualified_name.setter
    def organization_unit_fully_qualified_name(self, organization_unit_fully_qualified_name):
        """Sets the organization_unit_fully_qualified_name of this QueueItemDto.

        DEPRECATED.   # noqa: E501

        :param organization_unit_fully_qualified_name: The organization_unit_fully_qualified_name of this QueueItemDto.  # noqa: E501
        :type: str
        """

        self._organization_unit_fully_qualified_name = organization_unit_fully_qualified_name

    @property
    def id(self):
        """Gets the id of this QueueItemDto.  # noqa: E501


        :return: The id of this QueueItemDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueueItemDto.


        :param id: The id of this QueueItemDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueItemDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueItemDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueItemDto):
            return True

        return self.to_dict() != other.to_dict()
