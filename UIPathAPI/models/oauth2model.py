# coding: utf-8

"""
    UiPath.WebApi 16.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 16.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from UIPathAPI.configuration import Configuration


class OAuth2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "grant_type": "str",
        "client_id": "str",
        "client_secret": "str",
        "scope": "str",
    }

    attribute_map = {
        "grant_type": "grantType",
        "client_id": "clientId",
        "client_secret": "clientSecret",
        "scope": "scope",
    }

    def __init__(
        self,
        scope=None,
        client_id=None,
        client_secret=None,
        _configuration=None,
        grant_type=None,
    ):  # noqa: E501
        """OAuth2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._scope = None
        self._client_id = None
        self._client_secret = None
        self._grant_type = None
        self.discriminator = None

        if scope is not None:
            self.scope = scope
        self.client_id = client_id
        self.client_secret = client_secret
        self.grant_type = grant_type

    @property
    def scope(self):
        """Gets the scope of this OAuth2Model.  # noqa: E501


        :return: The scope of this OAuth2Model.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OAuth2Model.


        :param scope: The scope of this OAuth2Model.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def grant_type(self):
        """Gets the grant_type of this OAuth2Model.  # noqa: E501


        :return: The grant_type of this OAuth2Model.  # noqa: E501
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def scope(self, grant_type):
        """Sets the scope of this OAuth2Model.


        :param grant_type: The scope of this OAuth2Model.  # noqa: E501
        :type: str
        """

        self._grant_type = grant_type

    @property
    def client_id(self):
        """Gets the client_id of this OAuth2Model.  # noqa: E501


        :return: The client_id of this OAuth2Model.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuth2Model.


        :param client_id: The client_id of this OAuth2Model.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_id is None:
            raise ValueError(
                "Invalid value for `client_id`, must not be `None`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and client_id is not None
            and len(client_id) < 1
        ):
            raise ValueError(
                "Invalid value for `client_id`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuth2Model.  # noqa: E501


        :return: The client_secret of this OAuth2Model.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuth2Model.


        :param client_secret: The client_secret of this OAuth2Model.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_secret is None:
            raise ValueError(
                "Invalid value for `client_secret`, must not be `None`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and client_secret is not None
            and len(client_secret) < 1
        ):
            raise ValueError(
                "Invalid value for `client_secret`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._client_secret = client_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(OAuth2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuth2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OAuth2Model):
            return True

        return self.to_dict() != other.to_dict()
