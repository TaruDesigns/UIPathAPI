# coding: utf-8

"""
    UiPath.WebApi 16.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 16.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from UIPathAPI.configuration import Configuration


class UserLoginAttemptDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_time': 'datetime',
        'client_ip_address': 'str',
        'client_name': 'str',
        'browser_info': 'str',
        'result': 'str',
        'user_id': 'int',
        'id': 'int'
    }

    attribute_map = {
        'creation_time': 'CreationTime',
        'client_ip_address': 'ClientIpAddress',
        'client_name': 'ClientName',
        'browser_info': 'BrowserInfo',
        'result': 'Result',
        'user_id': 'UserId',
        'id': 'Id'
    }

    def __init__(self, creation_time=None, client_ip_address=None, client_name=None, browser_info=None, result=None, user_id=None, id=None, _configuration=None):  # noqa: E501
        """UserLoginAttemptDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creation_time = None
        self._client_ip_address = None
        self._client_name = None
        self._browser_info = None
        self._result = None
        self._user_id = None
        self._id = None
        self.discriminator = None

        if creation_time is not None:
            self.creation_time = creation_time
        if client_ip_address is not None:
            self.client_ip_address = client_ip_address
        if client_name is not None:
            self.client_name = client_name
        if browser_info is not None:
            self.browser_info = browser_info
        if result is not None:
            self.result = result
        if user_id is not None:
            self.user_id = user_id
        if id is not None:
            self.id = id

    @property
    def creation_time(self):
        """Gets the creation_time of this UserLoginAttemptDto.  # noqa: E501

        The date and time when the action was performed.  # noqa: E501

        :return: The creation_time of this UserLoginAttemptDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this UserLoginAttemptDto.

        The date and time when the action was performed.  # noqa: E501

        :param creation_time: The creation_time of this UserLoginAttemptDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def client_ip_address(self):
        """Gets the client_ip_address of this UserLoginAttemptDto.  # noqa: E501

        Client IP Address  # noqa: E501

        :return: The client_ip_address of this UserLoginAttemptDto.  # noqa: E501
        :rtype: str
        """
        return self._client_ip_address

    @client_ip_address.setter
    def client_ip_address(self, client_ip_address):
        """Sets the client_ip_address of this UserLoginAttemptDto.

        Client IP Address  # noqa: E501

        :param client_ip_address: The client_ip_address of this UserLoginAttemptDto.  # noqa: E501
        :type: str
        """

        self._client_ip_address = client_ip_address

    @property
    def client_name(self):
        """Gets the client_name of this UserLoginAttemptDto.  # noqa: E501

        Client name  # noqa: E501

        :return: The client_name of this UserLoginAttemptDto.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this UserLoginAttemptDto.

        Client name  # noqa: E501

        :param client_name: The client_name of this UserLoginAttemptDto.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def browser_info(self):
        """Gets the browser_info of this UserLoginAttemptDto.  # noqa: E501

        Browser Information  # noqa: E501

        :return: The browser_info of this UserLoginAttemptDto.  # noqa: E501
        :rtype: str
        """
        return self._browser_info

    @browser_info.setter
    def browser_info(self, browser_info):
        """Sets the browser_info of this UserLoginAttemptDto.

        Browser Information  # noqa: E501

        :param browser_info: The browser_info of this UserLoginAttemptDto.  # noqa: E501
        :type: str
        """

        self._browser_info = browser_info

    @property
    def result(self):
        """Gets the result of this UserLoginAttemptDto.  # noqa: E501

        The login's attempt result  # noqa: E501

        :return: The result of this UserLoginAttemptDto.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this UserLoginAttemptDto.

        The login's attempt result  # noqa: E501

        :param result: The result of this UserLoginAttemptDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Success", "InvalidUserNameOrEmailAddress", "InvalidPassword", "UserIsNotActive", "InvalidTenancyName", "TenantIsNotActive", "UserEmailIsNotConfirmed", "UnknownExternalLogin", "LockedOut", "UserPhoneNumberIsNotConfirmed"]  # noqa: E501
        if (self._configuration.client_side_validation and
                result not in allowed_values):
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def user_id(self):
        """Gets the user_id of this UserLoginAttemptDto.  # noqa: E501

        The user that authenticated  # noqa: E501

        :return: The user_id of this UserLoginAttemptDto.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserLoginAttemptDto.

        The user that authenticated  # noqa: E501

        :param user_id: The user_id of this UserLoginAttemptDto.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def id(self):
        """Gets the id of this UserLoginAttemptDto.  # noqa: E501


        :return: The id of this UserLoginAttemptDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserLoginAttemptDto.


        :param id: The id of this UserLoginAttemptDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserLoginAttemptDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserLoginAttemptDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserLoginAttemptDto):
            return True

        return self.to_dict() != other.to_dict()
